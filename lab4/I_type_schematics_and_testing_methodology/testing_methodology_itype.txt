TESTING METHODOLOGY
*******************

The approach we took to testing this part of the lab is to store the results of each instruction type in consecutive registers in the register file, and then compare the final values of those registers to the values we expected to be there if it was working properly. Here are both [1] the machine instrcutions that we wrote for our tests and [2] the assembly code that resulted from the achine code after putting it through our assembler:

[1]

addi $r1 $r0 7		//$r1 = 0x00000007
andi $r2 $r1 6		//$r2 = 0x00000006
andi $r3 $r1 9		//$r3 = 0x00000001
ori  $r4 $r1 16		//$r4 = 0x00000017
xori $r5 $r1 2		//$r5 = 0x00000005
slti $r6 $r1 8		//$r6 = 0x00000001
slti $r7 $r1 6		//$r6 = 0x00000000
addi $r8 $r0 4		//$r8 = 0x00000004 (offset)
sw $r4, 16($r0)		//17 stored in location 64 in memory
sw $r2, 16($r8)		//6 stored in location 72 in memory
lw $r9, 16($r0)		//$r9 = 0x00000017
lw $r10, 16($r8)	//$r10 = 0x00000006

[2]

20010007
30220006
30230009
34240010
38250002
28260008
28270006
20080004
ac040190
ad020190
8c090190
8d0a0190

From these test instructions, we would expect the following results:

Testing andi, ori, xori, slti, addi:
- The values of $r1 and $r8 test addi, and should be 32'h7 and 32'h4 respectively.
- The values of $r2 and $r3 test andi, and should be 32'h6 and 32'h1 respectively because their operations are bitwise AND of the following:
	$r2 = 32'b00000000000000000000000000000111 & 32'b00000000000000000000000000000110
	$r3 = 32'b00000000000000000000000000000111 & 32'b00000000000000000000000000001001
- The value of $r4 tests ori, and should be 32'h17 because it is the result of the following bitwise OR operation:
	$r4 = 32'b00000000000000000000000000000111 | 32'b00000000000000000000000000010000

- The value of $r5 tests xori, and should be 32'h5 because it is the result of the following bitwise XOR operation:
	$r5 = 32'b00000000000000000000000000000111 | 32'b00000000000000000000000000000010
- The value of $r6 tests slti, and should be 32'h1 because the value stored in $r1 (which is 7) is less than 8.
- The value of $r7 tests slti, and should be 32'h0 because the value stored in $r1 (which is 7) is not less than 6.

Testing LW and SW:
- The last 4 instructions in the test file are testing the functionality of LW and SW. The two SW instructions store two values into consecutive locations in data memory, and the two LW instructions retrieve those values and store them into the register file.
- We know that SW and LW are working if the values in %r9 and $r10 are 32'h17 and 32'h6, respectively.

RESULTS

By analyzing the waveforms and comparing the register values that we obtained from our simulation to those that we expected to find, we conclude that our I-type instructions are all working properly. We cannot think of any edge cases we have neglected in this multi-cycle datapath. If we were testing a pipelined datapath, our testing would have had to have been much more thorough.
